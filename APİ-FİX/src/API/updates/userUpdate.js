const UserModel = require("../../Models/UserModel");
let chalk;

(async () => {
  chalk = (await import('chalk')).default;
})();

class UserUpdateHandler {
  constructor(clients) {
    this.clients = clients;
    this.initialize();
  }

  initialize() {
    this.clients.forEach(client => {
      client.on('userUpdate', async (oldUser, newUser) => {
        await this.handleUserUpdate(newUser);
      });
    });
  }

  async handleUserUpdate(user) {
    try {
      const userData = {
        discordId: user.id,
        username: user.username,
        discriminator: user.discriminator,
        avatar: user.avatar,
        lastUpdated: new Date()
      };

      await UserModel.findOneAndUpdate(
        { discordId: userData.discordId },
        userData,
        { upsert: true, new: true }
      );

      if (chalk) {
        console.log(chalk.blueBright('ðŸ”„ [KULLANICI GÃœNCELLENDÄ°] ') + chalk.bold(`${user.username} (${user.id})`) + chalk.cyanBright(' gÃ¼ncellendi!'));
      } else {
        console.log(`[KULLANICI GÃœNCELLENDÄ°] ${user.username} (${user.id}) gÃ¼ncellendi!`);
      }
    } catch (error) {
      if (chalk) {
        console.error(chalk.red('KullanÄ±cÄ± gÃ¼ncellenirken hata oluÅŸtu:'), error);
      } else {
        console.error('KullanÄ±cÄ± gÃ¼ncellenirken hata oluÅŸtu:', error);
      }
    }
  }
}

module.exports = UserUpdateHandler; 